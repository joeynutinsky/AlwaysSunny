//
//  ButtonKit.swift
//  DannyDevito
//
//  Created by JoeyNutinsky on 10/14/16.
//  Copyright Â© 2016 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class ButtonKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawButton(frame: CGRect = CGRect(x: 0, y: 0, width: 228, height: 71), pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let color = UIColor(red: 0.996, green: 1.000, blue: 0.032, alpha: 1.000)
        var colorHueComponent: CGFloat = 1
        var colorSaturationComponent: CGFloat = 1
        var colorBrightnessComponent: CGFloat = 1
        color.getHue(&colorHueComponent, saturation: &colorSaturationComponent, brightness: &colorBrightnessComponent, alpha: nil)

        let color2 = UIColor(hue: colorHueComponent, saturation: colorSaturationComponent, brightness: 0.9, alpha: color.cgColor.alpha)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.2)
        shadow.shadowOffset = CGSize(width: 1, height: 1)
        shadow.shadowBlurRadius = 2
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black.withAlphaComponent(0.29)
        shadow2.shadowOffset = CGSize(width: 1, height: 1)
        shadow2.shadowBlurRadius = 6

        //// Variable Declarations
        let notPressed = !pressed

        if (notPressed) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX + 11, y: frame.minY + 3, width: 203, height: 61))
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            color.setFill()
            rectanglePath.fill()
            context.restoreGState()

        }


        if (pressed) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: frame.minX + 12, y: frame.minY + 4, width: 203, height: 61))
            color2.setFill()
            rectangle2Path.fill()

            ////// Rectangle 2 Inner Shadow
            context.saveGState()
            context.clip(to: rectangle2Path.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0)
            context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            let rectangle2OpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
            context.setShadow(offset: shadow2.shadowOffset, blur: shadow2.shadowBlurRadius, color: rectangle2OpaqueShadow.cgColor)
            context.setBlendMode(.sourceOut)
            context.beginTransparencyLayer(auxiliaryInfo: nil)

            rectangle2OpaqueShadow.setFill()
            rectangle2Path.fill()

            context.endTransparencyLayer()
            context.endTransparencyLayer()
            context.restoreGState()

        }


        //// Text Drawing
        let textRect = CGRect(x: frame.minX + 21, y: frame.minY + 11, width: 185, height: 47)
        let textTextContent = "SPEAK"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-BoldItalic", size: 38)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
    }

    public dynamic class func drawCanvas1(frame: CGRect = CGRect(x: 0, y: 0, width: 228, height: 71), pressed: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let add = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000)
        var addHueComponent: CGFloat = 1
        var addSaturationComponent: CGFloat = 1
        var addBrightnessComponent: CGFloat = 1
        add.getHue(&addHueComponent, saturation: &addSaturationComponent, brightness: &addBrightnessComponent, alpha: nil)

        let color3 = UIColor(hue: addHueComponent, saturation: addSaturationComponent, brightness: 0.5, alpha: add.cgColor.alpha)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.2)
        shadow.shadowOffset = CGSize(width: 1, height: 1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let notPressed = !pressed


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.09211 + 0.5), y: frame.minY + fastFloor(frame.height * 0.05634 + 0.5), width: fastFloor(frame.width * 0.88158 + 0.5) - fastFloor(frame.width * 0.09211 + 0.5), height: fastFloor(frame.height * 0.92958 + 0.5) - fastFloor(frame.height * 0.05634 + 0.5))


        //// Group
        if (pressed) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(roundedRect: CGRect(x: group.minX + fastFloor(group.width * 0.06111 + 0.5), y: group.minY + fastFloor(group.height * 0.01613 + 0.5), width: fastFloor(group.width * 0.94167) - fastFloor(group.width * 0.06111 + 0.5) + 0.5, height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.01613 + 0.5)), cornerRadius: 24)
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            color3.setFill()
            rectanglePath.fill()
            context.restoreGState()

        }


        if (notPressed) {
            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: group.minX + fastFloor(group.width * 0.06111 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.94167) - fastFloor(group.width * 0.06111 + 0.5) + 0.5, height: fastFloor(group.height * 0.98387 + 0.5) - fastFloor(group.height * 0.00000 + 0.5)), cornerRadius: 24)
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            add.setFill()
            rectangle2Path.fill()
            context.restoreGState()

        }


        //// Text Drawing
        let textRect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.11290 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 0.87097 + 0.5) - fastFloor(group.height * 0.11290 + 0.5))
        let textTextContent = "+"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-BoldItalic", size: 38)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.50556 + 0.5), y: group.minY + fastFloor(group.height * 0.27419 + 0.5), width: fastFloor(group.width * 0.62222 + 0.5) - fastFloor(group.width * 0.50556 + 0.5), height: fastFloor(group.height * 0.53226 + 0.5) - fastFloor(group.height * 0.27419 + 0.5))
        let text2TextContent = "+"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-BoldItalic", size: 12)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: group.minX + fastFloor(group.width * 0.47222 + 0.5), y: group.minY + fastFloor(group.height * 0.19355 + 0.5), width: fastFloor(group.width * 0.58889 + 0.5) - fastFloor(group.width * 0.47222 + 0.5), height: fastFloor(group.height * 0.45161 + 0.5) - fastFloor(group.height * 0.19355 + 0.5))
        let text3TextContent = "+"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue-BoldItalic", size: 9)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()
    }

    public dynamic class func drawStats(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100)) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + fastFloor(frame.width * 0.12000 + 0.5), y: frame.minY + fastFloor(frame.height * 0.09000 + 0.5), width: fastFloor(frame.width * 0.89500) - fastFloor(frame.width * 0.12000 + 0.5) + 0.5, height: fastFloor(frame.height * 1.00000 + 0.5) - fastFloor(frame.height * 0.09000 + 0.5))


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.24176 + 0.5), width: fastFloor(group.width * 0.18065 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.24176 + 0.5)))
        UIColor.gray.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: group.minX + fastFloor(group.width * 0.27742) + 0.5, y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.44516) - fastFloor(group.width * 0.27742), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5)))
        UIColor.gray.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: group.minX + fastFloor(group.width * 0.56129) + 0.5, y: group.minY + fastFloor(group.height * 0.49451 + 0.5), width: fastFloor(group.width * 0.72903) - fastFloor(group.width * 0.56129), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.49451 + 0.5)))
        UIColor.gray.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: group.minX + fastFloor(group.width * 0.81935) + 0.5, y: group.minY + fastFloor(group.height * 0.32967 + 0.5), width: fastFloor(group.width * 1.00000) - fastFloor(group.width * 0.81935), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.32967 + 0.5)))
        UIColor.gray.setFill()
        rectangle4Path.fill()
    }

}
